<!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" >

<web-app>
  <display-name>Archetype Created Web Application</display-name>
	<!-- Spring和mybatis的配置文件 -->  
   <context-param>  
        <param-name>contextConfigLocation</param-name>  
        <param-value>classpath:spring-*.xml</param-value>  
    </context-param>  
    <!-- 编码过滤器  Spring中的字符编码过滤器（CharacterEncodingFilter），可以很方便的为我们解决项目中出现的中文乱码问题；-->  
    <filter>  
        <filter-name>encodingFilter</filter-name>  
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>  
        <async-supported>true</async-supported>  
        <init-param>  
            <param-name>encoding</param-name>  
            <param-value>UTF-8</param-value>  
        </init-param>  
    </filter> 
    <!-- Filter负责拦截的URL 全部以/的请求,如果<url-pattern>/*.action </>,将会以拦截*.action的请求 -->
    <filter-mapping>  
        <filter-name>encodingFilter</filter-name>  
        <url-pattern>/*</url-pattern>  
    </filter-mapping>
    <!-- shiro过滤器定义 -->
	<filter>
	    <filter-name>shiroFilter</filter-name>
	    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	    <init-param>
	        <!-- 该值缺省为false,表示生命周期由SpringApplicationContext管理,设置为true则表示由ServletContainer管理 -->
	        <param-name>targetFilterLifecycle</param-name>
	        <param-value>true</param-value>
	    </init-param>
	</filter>
	<!-- 拦截所有请求 -->
	<filter-mapping>
	    <filter-name>shiroFilter</filter-name>
	    <url-pattern>/*</url-pattern>
	</filter-mapping>
   <!-- Spring监听器,配合它一起使用的，经常是context-param，用来指定Spring要加载的配置文件，本质上是创建了一个 WebApplicationContext-->  
   <listener>  
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>  
    </listener>  
    <!-- 防止Spring内存溢出监听器 -->  
    <listener>  
        <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>  
    </listener>  
  
  <!-- druid start--> 
  <!-- 配置sql监控 start--> 
	<servlet>  
	  <servlet-name>DruidStatView</servlet-name>  
	  <servlet-class>com.alibaba.druid.support.http.StatViewServlet</servlet-class>  
    </servlet>  
	<servlet-mapping>  
	  <servlet-name>DruidStatView</servlet-name>
	  <!-- 网页监控路径放在了项目路径下的 druid路径中 -->  
	  <url-pattern>/druid/*</url-pattern>  
	</servlet-mapping>  
  <!-- 配置sql监控 end--> 
  <!-- 监控jsp和do请求，exclusions参数其实可以去掉的 start -->
	<filter>  
	  <filter-name>DruidWebStatFilter</filter-name>  
	  <filter-class>com.alibaba.druid.support.http.WebStatFilter</filter-class>  
	  <init-param>  
	      <param-name>exclusions</param-name>  
	      <param-value>*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*</param-value>  
	  </init-param>  
	</filter>  
	<filter-mapping>  
	  <filter-name>DruidWebStatFilter</filter-name>  
	  <url-pattern>/*</url-pattern>  
	</filter-mapping>  
	<welcome-file-list>
        <welcome-file>/login.jsp</welcome-file>
    </welcome-file-list>
    <!-- 配置SESSION超时，单位是分钟 -->
    <session-config>
        <session-timeout>30</session-timeout>
    </session-config>
    
    <!--定义一个cxf的servlet,访问webservice/*这个地址就会进入CXF的servlet中。-->
	<servlet>
	    <servlet-name>CXFServlet</servlet-name>
	    <servlet-class>org.apache.cxf.transport.servlet.CXFServlet</servlet-class>
	</servlet>
	<servlet-mapping>
	    <servlet-name>CXFServlet</servlet-name>
	    <url-pattern>/webservice/*</url-pattern>
	</servlet-mapping>

  <!-- 监控jsp和do请求，exclusions参数其实可以去掉的 end -->
  <!-- druid end-->  
  <!-- Spring MVC servlet -->
  <!-- DispatcherServlet则定义了mvc的相关内容，并配置拦截的url，所有/开头的请求，都会通过SpringMVC这个servlet进行处理。 -->
  <!-- 如果你的DispatcherServlet拦截"*.do"这样的有后缀的URL，就不存在访问不到静态资源的问题。 -->
  <!-- 如果你的DispatcherServlet拦截"/"，为了实现REST风格，拦截了所有的请求，那么同时对*.js,*.jpg等静态文件的访问也就被拦截了。-->
  <!-- 激活Tomcat的defaultServlet来处理静态文件，如下面<servlet-name>default</servlet-name>所配 -->
  <!-- Servlet拦截匹配规则要自已定义，把拦截下来的请求，交给对于对应的@RequestMapping方法进行处理,也就是依据某某规则分发到目标Controller(我们写的Action)来处理。 -->  
    <servlet>  
        <servlet-name>SpringMVC</servlet-name>  
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>  
        <init-param>  
            <param-name>contextConfigLocation</param-name>  
            <param-value>classpath:spring-mvc.xml</param-value>  
        </init-param>  
        <load-on-startup>1</load-on-startup>  
        <async-supported>true</async-supported>  
    </servlet>  
    <servlet-mapping>  
        <servlet-name>SpringMVC</servlet-name>  
        <!-- default servlet映射，此处可以可以配置成*.do，对应struts的后缀习惯 -->  
        <url-pattern>/</url-pattern>  
    </servlet-mapping>  
    <welcome-file-list>  
        <welcome-file>/turnToIndex.jsp</welcome-file>  
    </welcome-file-list>  
    <error-page>
        <error-code>404</error-code>
        <location>/notfound.jsp</location>
    </error-page>
    
   <!-- 确保静态资源可以被访问,对客户端请求的静态资源如图片、
        JS文件等的请求交由默认的servlet进行处理,不然访问会报404 -->
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.jpg</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.png</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.gif</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.js</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.css</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.swf</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.html</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.txt</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.ico</url-pattern>
    </servlet-mapping>
</web-app>
