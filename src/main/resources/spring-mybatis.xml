<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"  
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:mvc="http://www.springframework.org/schema/mvc"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans    
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd    
                        http://www.springframework.org/schema/context    
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd    
                        http://www.springframework.org/schema/mvc    
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">
    <!-- 自动扫描 -->  
    <context:component-scan base-package="com.zh.*" />  
    
  <!-- 引入properties配置文件 -->    
	 <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
	    <property name="locations">  
	        <list>  
	           <value>classpath:config/jdbc.properties</value>
	           <value>classpath:config/redis.properties</value>    
	            <!--要是有多个配置文件，只需在这里继续添加即可 -->  
	        </list>  
	    </property>  
	</bean>  
  
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"  
        destroy-method="close">  
        <property name="driverClassName" value="${driver}" />  
        <property name="url" value="${url}" />  
        <property name="username" value="${username}" />  
        <property name="password" value="${password}" />  
        <!-- 初始化连接大小 -->  
        <property name="initialSize" value="${initialSize}"></property>  
        <!-- 连接池最大数量 -->  
        <property name="maxActive" value="${maxActive}"></property>  
        <!-- 连接池最大空闲 -->  
        <property name="maxIdle" value="${maxIdle}"></property>  
        <!-- 连接池最小空闲 -->  
        <property name="minIdle" value="${minIdle}"></property>  
        <!-- 获取连接最大等待时间 -->  
        <property name="maxWait" value="${maxWait}"></property>  
    </bean>  
  
    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" />  
        <!-- 自动扫描mapping.xml文件 -->  
        <property name="mapperLocations" value="classpath:com/zh/mapping/*.xml"></property>  
    </bean>  
  
    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.zh.dao" />  
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>  
    </bean>  
  
    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->  
    <bean id="transactionManager"  
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource" />  
    </bean>  
    
    <!-- Redis和缓存配置开始 -->
	<!-- jedis 配置 -->
	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig" >
	      <property name="maxIdle" value="${redis.maxIdle}" />
	      <property name="maxWaitMillis" value="${redis.maxWait}" />
	      <property name="testOnBorrow" value="${redis.testOnBorrow}" />
	</bean >
	
	<!-- redis服务器中心 -->
	<bean id="connectionFactory"  class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" >
	      <property name="poolConfig" ref="poolConfig" />
	      <property name="port" value="${redis.port}" />
	      <property name="hostName" value="${redis.host}" />
	      <!-- <property name="password" value="${redis.password}" /> -->
	      <property name="timeout" value="${redis.timeout}" ></property>
	</bean >
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate" >
	      <property name="connectionFactory" ref="connectionFactory" />
	      <property name="keySerializer" >
	          <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
	      </property>
	      <property name="valueSerializer" >
	          <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
	      </property>
	</bean >
	
    <!-- cache配置插入、更新数据时从redis中清除缓存 -->  
    <bean id="putCache" class="com.zh.redis.cache.PutCacheAOP" >  
         <property name="redisTemplate" ref="redisTemplate" />
    </bean>  
    
    <!-- cache配置从redis获取缓存数据 -->  
    <bean id="getCache" class="com.zh.redis.cache.GetCacheAOP" >  
          <property name="redisTemplate" ref="redisTemplate" />
    </bean>  
	 
	<!-- Redis和缓存配置结束 -->
</beans>  